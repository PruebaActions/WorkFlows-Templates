name: Pull Request Pipeline .NET + CodeQL + OWASP ZAP

on: 
  workflow_call:
    inputs:
          project_paths:
              description: "Lista JSON de proyectos a compilar (path, isFramework y language)"
              required: true
              type: string
          test_paths:
              description: "Lista JSON de proyectos de test (path, isFramework, lenguaje). Solo incluir proyectos .csproj de tests"
              required: true
              type: string
          docker_targets:
              description: "Lista JSON de targets Docker (image_name, container_name, dockerfile, host_port, container_port, isFramework,is_api, api_doc_path)"
              required: true
              type: string
          codeql_languages: 
              description: "Lista de lenguajes soportados por CodeQL (Separados por coma)"
              required: true
              type: string
          solution_path_codeql:
              description: "Ruta al archivo .sln principal para CodeQL Manual Build Fallback"
              required: false
              type: string
          solution_isFramework_codeql:
              description: "Indica si la soluciÃ³n usa .NET Framework (true) o .NET Core/5+ (false) para CodeQL Manual Build Fallback"
              required: false
              type: string
          
        
jobs:
  #Detectar si alguna app usa .NET Framework
  detect-framework:
    runs-on:
      group: DAST
    outputs:
      hasFramework: ${{ steps.check.outputs.hasFramework }}
    steps:
      - name: Check if any app requires Windows containers
        id: check
        shell: powershell
        run: |
          $targets = '${{ inputs.docker_targets }}' | ConvertFrom-Json
          $frameworkExists = $targets | Where-Object { $_.isFramework -eq "true" }
          if ($frameworkExists) {
            Write-Host "At least one .NET Framework app found."
            echo "hasFramework=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "hasFramework=false" >> $env:GITHUB_OUTPUT
          }

  build-projects:
    runs-on:
      group: DAST
    needs: detect-framework
    strategy:
      matrix:
        project: ${{ fromJSON(inputs.project_paths) }}
    steps:
      - uses: actions/checkout@v4

      - name: Build Vue.js project
        if: ${{ matrix.project.language == 'javascript' }}
        uses:  PruebaActions/WorkFlows-Templates/.github/actions/build-vue@main
        with:
          project_path: ${{ matrix.project.path }}

      - name: Build .NET Framework app
        if: ${{ matrix.project.language == 'csharp' && matrix.project.isFramework == 'true' }}
        uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test-dotnet-framework@main
        with:
          solution_path: ${{ matrix.project.path }}
          isTest: false

      - name: Build .NET Core o superior
        if: ${{ matrix.project.language == 'csharp' && matrix.project.isFramework == 'false' }}
        uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test@main
        with:
          project_path: ${{ matrix.project.path }}
          isTest: false

  run-tests:
    runs-on:
      group: DAST
    needs: build-projects
    if: ${{ inputs.test_paths != '[]' }}
    strategy:
      matrix:
        test: ${{ fromJSON(inputs.test_paths) }}
    steps:
      - uses: actions/checkout@v4

      - name: Run .NET Framework tests
        if: ${{ matrix.test.language == 'csharp' && matrix.test.isFramework == 'true' }}
        uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test-dotnet-framework@main
        with:
          solution_path: ${{ matrix.test.path }}
          isTest: true

      - name: Run .NET Core o superior tests
        if: ${{ matrix.test.language == 'csharp' && matrix.test.isFramework == 'false' }}
        uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test@main
        with:
          project_path: ${{ matrix.test.path }}
          isTest: true

  #Build and Run App en Docker
  docker-set-up:
    runs-on:
      group: DAST
    needs: [detect-framework, build-projects]
    strategy:
      matrix:
        target: ${{ fromJSON(inputs.docker_targets) }}
    steps:
      - uses: actions/checkout@v4

      - name: Switch Docker Engine if needed
        uses: PruebaActions/WorkFlows-Templates/.github/actions/switch-docker-engine@main
        with:
          isFramework: ${{ needs.detect-framework.outputs.hasFramework}}

      - name: Build & Run Docker
        uses: PruebaActions/WorkFlows-Templates/.github/actions/docker-set-up@main
        with:
          image_name: ${{ matrix.target.image_name}}
          container_name: ${{ matrix.target.container_name}}
          dockerfile: ${{ matrix.target.dockerfile}}
          host_port: ${{ matrix.target.host_port}}
          container_port: ${{ matrix.target.container_port}}

  codeql-analysis:
    runs-on:
      group: DAST
    needs: docker-set-up
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.codeql_languages }} 
          queries: security-and-quality
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: '0'

      # ðŸ§  Intentar autobuild
      - name: CodeQL Autobuild
        id: autobuild
        uses: github/codeql-action/autobuild@v3
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: '0'
        continue-on-error: true

      #  ðŸª„ Llamar composite si el autobuild falla
      - name: Manual build fallback
        if: ${{ steps.autobuild.outcome == 'failure' }}
        uses: PruebaActions/WorkFlows-Templates/.github/actions/manual-build-fallback@main
        with:
          solution_path: ${{ inputs.solution_path_codeql }}
          solution_isFramework: ${{ inputs.solution_isFramework_codeql }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: '0'

  #OWASP ZAP Scan (DAST)
  # dast-scan:
  #   runs-on:
  #     group: DAST
  #   #needs: docker-set-up
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(inputs.docker_targets) }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Run OWASP ZAP Baseline Scan
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/dast-scan@main
  #       with:
  #         container_name: ${{ matrix.target.container_name }}
  #         wsl_distro: "OracleLinux_9_5"
  #         github_workspace: ${{ github.workspace }}
  #         run_number: ${{ github.run_number }} 
  #         is_api: ${{ matrix.target.is_api || 'false' }}
  #         api_doc_path: ${{ matrix.target.api_doc_path || '' }}


  #Cleanup y retorno a Linux containers
  # delete-container:
  #   runs-on:
  #     group: DAST
  #   needs: dast-scan
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(inputs.docker_targets) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: PruebaActions/WorkFlows-Templates/.github/actions/stop-and-remove-docker@main
  #       with: 
  #         image_name: ${{ matrix.target.image_name }}
  #         container_name: ${{ matrix.target.container_name }}

  #     - name: Switch Back to Linux Engine (always)
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/switch-docker-engine@main
  #       with:
  #         isFramework: 'false'



  

  