name: Probando la creacion de artifacts

on:
  workflow_call:
    inputs:
      project_path:
        required: true
        type: string
      solution_path:
        required: true
        type: string
      project_type:
        required: true
        type: string

jobs:
  building_project:
    runs-on: [self-hosted, windows, x64, klk]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build .NET framework Project
        if: ${{ inputs.project_type == 'framework' }}
        shell: powershell
        run: |
          Write-Host "restoring packages at path: ${{ inputs.solution_path }}"
          nuget restore ${{ inputs.solution_path }}
          Write-Host "Building project at path: ${{ inputs.project_path }}"
          msbuild ${{ inputs.project_path }} `
            /t:WebPublish `
            /p:Configuration=Release `
            /p:WebPublishMethod=FileSystem `
            /p:PublishUrl="$env:GITHUB_WORKSPACE\publish" `
            /p:DeleteExistingFiles=False `
            /verbosity:minimal


      - name: Build .NET Project
        if: ${{ inputs.project_type != 'framework' }}
        shell: powershell
        run: |
          Write-Host "restoring packages at path: ${{ inputs.solution_path }}"
          dotnet restore "${{ inputs.project_path }}" --verbosity minimal

          Write-Host "‚öôÔ∏è Building project in Release mode"
          dotnet build "${{ inputs.project_path }}" -c Release --no-restore --verbosity minimal

          Write-Host "üì¶ Publishing project to workspace/publish"
          dotnet publish "${{ inputs.project_path }}" -c Release -o "$env:GITHUB_WORKSPACE\\publish" --no-build --verbosity minimal

      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-project
          path: ${{ github.workspace }}/publish/

  downloading_artifact:
    needs: building_project
    runs-on: [self-hosted, windows, x64, iis]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-project
          path: ${{ github.workspace }}/artifact/

  deploy_to_iis:
    needs: downloading_artifact
    runs-on: [self-hosted, windows, x64, iis]
    steps:
      - name: Deploy to IIS using Web Deploy
        shell: powershell
        run: |
          # Ruta local del artifact descargado
          $publishPath = "$env:GITHUB_WORKSPACE\artifact"

          # Ruta de instalaci√≥n de msdeploy
          $msdeploy = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          if (-Not (Test-Path $msdeploy)) {
            $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          }

          if (-Not (Test-Path $msdeploy)) {
            Write-Host "msdeploy.exe not found. Please install Web Deploy on this server."
            exit 1
          }

          Write-Host "Using msdeploy at: $msdeploy"
          Write-Host "Deploying from: $publishPath"
          Write-Host "Destination: C:\inetpub\wwwroot\artifact"

          # Ejecutar la sincronizaci√≥n
          & $msdeploy `
            -verb:sync `
            -source:dirPath="$publishPath" `
            -dest:dirPath="C:\inetpub\wwwroot\Yuka" `
            -skip:objectName=filePath,absolutePath=.*\\web\\.config$ `
            -useCheckSum `
            -allowUntrusted `
            -enableRule:AppOffline `
            -enableRule:DoNotDeleteRule `
            -retryAttempts:3 `
            -verbose

          if ($LASTEXITCODE -ne 0) {
            Write-Host "Deployment failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          } else {
            Write-Host "Deployment completed successfully."
          }

          


          