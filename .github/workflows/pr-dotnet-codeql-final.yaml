name: Pull Request Pipeline .NET + CodeQL + OWASP ZAP

on:
  workflow_call:
    inputs:
      codeql_language:
        description: "Lenguajes a analizar con CodeQL"
        default: "csharp"
        type: string

      project_paths:
        description: "Lista JSON de proyectos a compilar (path, isFramework)"
        required: true
        type: string

      has_tests:
        description: "Confirmaci√≥n de si la app tiene tests"
        type: boolean
        required: true

      docker_targets:
        description: "Lista JSON de targets Docker (image_name, container_name, dockerfile, host_port, container_port, isFramework)"
        required: true
        type: string


jobs:
  # üß† 1Ô∏è‚É£ Detectar si alguna app usa .NET Framework
  detect-framework:
    runs-on: 
      group: DAST
    outputs:
      hasFramework: ${{ steps.check.outputs.hasFramework }}
    steps:
      - name: Check if any app requires Windows containers
        id: check
        shell: powershell
        run: |
          $targets = '${{ inputs.docker_targets }}' | ConvertFrom-Json
          $frameworkExists = $targets | Where-Object { $_.isFramework -eq "true" }
          if ($frameworkExists) {
            Write-Host "At least one .NET Framework app found."
            echo "hasFramework=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "hasFramework=false" >> $env:GITHUB_OUTPUT
          }

  # üèó 2Ô∏è‚É£ Build and Test (para m√∫ltiples proyectos)
  # build-and-test:
  #   runs-on:
  #     group: DAST
  #   needs: detect-framework
  #   strategy:
  #     matrix:
  #       project: ${{ fromJSON(inputs.project_paths) }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Build .NET Framework app
  #       if: matrix.project.isFramework == 'true'
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test-dotnet-framework@main
  #       with:
  #         solution_path: ${{ matrix.project.path }}
  #         has_tests: ${{ inputs.has-tests }}

  #     - name: Build .NET Core/Modern app
  #       if: matrix.project.isFramework == 'false'
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test@main
  #       with:
  #         project_path: ${{ matrix.project.path }}
  #         has_tests: ${{ inputs.has_tests }}

  # üêã 3Ô∏è‚É£ Build & Run Docker containers
  # docker-set-up:
  #   runs-on: 
  #     group: DAST
  #   needs: [detect-framework, build-and-test]
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(inputs.docker_targets) }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     # Cambia el engine si se requiere Windows
  #     - name: Switch Docker Engine if needed
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/switch-docker-engine@main
  #       with:
  #         isFramework: ${{ needs.detect-framework.outputs.hasFramework }}

  #     - name: Build & Run Docker
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/docker-set-up@main
  #       with:
  #         image_name: ${{ matrix.target.image_name }}
  #         container_name: ${{ matrix.target.container_name }}
  #         dockerfile: ${{ matrix.target.dockerfile }}
  #         host_port: ${{ matrix.target.host_port }}
  #         container_port: ${{ matrix.target.container_port }}

  # üß¨ 4Ô∏è‚É£ CodeQL Analysis (SAST)
  codeql-analysis:
    runs-on:
      group: DAST
    #needs: docker-set-up
    strategy:
      matrix:
        project: ${{ fromJSON(inputs.project_paths) }}
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.codeql_language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ inputs.codeql_language }}"
          output: sarif-results.sarif
          upload: true

  # üß™ 5Ô∏è‚É£ OWASP ZAP Scan (DAST)
  dast-scan:
    runs-on:
      group: DAST
    #needs: docker-set-up
    strategy:
      matrix:
        target: ${{ fromJSON(inputs.docker_targets) }}
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP ZAP Scan
        uses: PruebaActions/WorkFlows-Templates/.github/actions/dast-scan@main
        with:
          container_name: ${{ matrix.target.container_name }}
          wsl_distro: "OracleLinux_9_5"
          github_workspace: ${{ github.workspace }}
          run_number: ${{ github.run_number }}

  #üßπ 6Ô∏è‚É£ Cleanup y retorno a Linux containers
  # delete-container:
  #   runs-on: 
  #     group: DAST
  #   needs: dast-scan
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(inputs.docker_targets) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: PruebaActions/WorkFlows-Templates/.github/actions/stop-and-remove-docker@main
  #       with:
  #         image_name: ${{ matrix.target.image_name }}
  #         container_name: ${{ matrix.target.container_name }}

  #     - name: Switch back to Linux Engine (always)
  #       uses: PruebaActions/WorkFlows-Templates/.github/actions/switch-docker-engine@main
  #       with:
  #         isFramework: 'false'
