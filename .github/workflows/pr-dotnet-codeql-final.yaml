name: Pull Request Pipeline .NET + CodeQL + OWASP ZAP

on:
  workflow_call:
    inputs:
      image_name:
        description: "Nombre de la imagen Docker"
        required: true
        type: string
      container_name:
        description: "Nombre del contenedor Docker"
        required: true
        type: string
      dockerfile:
        description: "Ruta al Dockerfile"
        default: "./Dockerfile"
        required: true
        type: string
      container_port:
        description: "Puerto expuesto por la aplicaciÃ³n"
        default: "8080"
        type: string
      host_port:
        description: "Puerto en la HOST machine"
        type: string
        default: "4200"
      codeql_languages:
        description: "Lenguajes a analizar con CodeQL"
        default: "csharp"
        type: string
      project_paths:
        description: "Lista JSON de proyectos a compilar"
        required: true
        type: string
      has_tests: 
        description: "Confirmacion de si la app tiene tests"
        type: boolean
        required: true

jobs:
# Detectar tipo de proyecto (Si es .NET Framework o no)
  detect-framework:
    runs-on:
      group: Code-runners
    strategy:
      matrix:
        project: ${{ fromJSON(inputs.project_paths) }}
    outputs:
      isFramework: ${{ steps.detect.outputs.isFramework }}
    steps:
      - uses: actions/checkout@v4
      - id: detect
        shell: powershell
        run: |
          $proj = Get-Content "${{ matrix.project }}"
          if ($proj -match "<TargetFrameworkVersion>|packages.config") {
            echo "isFramework=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "isFramework=true" >> $env:GITHUB_OUTPUT
          }
  #Build and Test
  build-and-test:
    runs-on: 
      group: DAST
    needs: detect-framework
    strategy:
      matrix:
        project: ${{ fromJSON(inputs.project_paths) }}
    steps:
      - uses: actions/checkout@v4
      - name: Build .NET Framework app
        if: needs.detect-framework.outputs.isFramework == 'true'
      - uses: PruebaActions/Workflows-Templates/.github/actions/build-and-test-dotnet-framework@main
        with:
          solution_path: ${{ matrix.project }}
          has_tests: ${{ inputs.has_tests }}

          
      - name: Build .NET Core/Modern app
        if: needs.detect-framework.outputs.isFramework == 'false'
        uses: PruebaActions/Workflows-Templates/.github/actions/build-and-test@main
        with:
          project_path: ${{ matrix.project }}
          has_tests: ${{ inputs.has_test }}

  # ðŸ”¹ Build & Run App en Docker
  docker-set-up:
    runs-on:
      group: DAST
    steps:
      - uses: actions/checkout@v4
      - uses: PruebaActions/WorkFlows-Templates/.github/actions/docker-set-up@main
        with:
          image_name: ${{ inputs.image_name }}
          container_name: ${{ inputs.container_name }}
          dockerfile: ${{ inputs.dockerfile }}
          host_port: ${{ inputs.host_port }}
          container_port: ${{ inputs.container_port }}

  # ðŸ”¹ CodeQL Analysis (SAST)
 # codeql-analysis:
  #  runs-on:
   #     group: DAST
  #  needs: docker-set-up
   # permissions:
   #   actions: read
   #   contents: read
   #   security-events: write
   # steps:
    #  - uses: actions/checkout@v4
     # - name: Initialize CodeQL
    #    uses: github/codeql-action/init@v3
    #    with:
   #       languages: ${{ inputs.codeql_languages }}
   #   - name: Autobuild
   #     uses: github/codeql-action/autobuild@v3
   #   - name: Perform CodeQL Analysis
   #     uses: github/codeql-action/analyze@v3

  # ðŸ”¹ OWASP ZAP Scan (DAST)
  dast-scan:
    runs-on:
      group: DAST
    needs: docker-set-up
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run OWASP ZAP Baseline Scan via Docker in WSL
        run: |
          wsl -d Ubuntu -- bash -c "
            docker run --rm -v \$(pwd):/zap/wrk/:rw \
              zaproxy/zap-stable zap-baseline.py \
              -t http:host.docker.internal:4200 \
              -r zap-report.html
          "
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  delete-container:
    runs-on:
      group: DAST
    needs: dast-scan
    steps:
      - uses: actions/checkout@v4
      - uses: PruebaActions/WorkFlows-Templates/.github/actions/stop-and-remove-docker@main
        with:
          image_name: ${{ inputs.image_name }}
          container_name: ${{ inputs.container_name }}
