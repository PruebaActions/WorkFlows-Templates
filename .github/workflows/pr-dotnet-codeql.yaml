name: Pull Request Pipeline .NET + CodeQL + OWASP ZAP

on:
  workflow_call:
    inputs:
      image_name:
        description: "Nombre de la imagen Docker"
        required: true
        type: string
      container_name:
        description: "Nombre del contenedor Docker"
        required: true
        type: string
      dockerfile:
        description: "Ruta al Dockerfile"
        default: "./Dockerfile"
        type: string
      port:
        description: "Puerto expuesto por la aplicaciÃ³n"
        default: "8080"
        type: string
      codeql_languages:
        description: "Lenguajes a analizar con CodeQL"
        default: "csharp"
        type: string

jobs:
  # ðŸ”¹ Build & Run App en Docker
  build-and-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: PruebaActions/WorkFlows-Templates/.github/actions/build-and-test@main
        with:
          image_name: ${{ inputs.image_name }}
          container_name: ${{ inputs.container_name }}
          dockerfile: ${{ inputs.dockerfile }}
          port: ${{ inputs.port }}

  # ðŸ”¹ CodeQL Analysis (SAST)
  codeql-analysis:
    runs-on: self-hosted
    needs: build-and-test
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.codeql_languages }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ðŸ”¹ OWASP ZAP Scan (DAST)
  dast-scan:
    runs-on: self-hosted
    needs: build-and-test
    steps:
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "http://localhost:${{ inputs.port }}"
          artifact_name: 'drop'
