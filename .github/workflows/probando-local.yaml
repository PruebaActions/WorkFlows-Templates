name: "IIS WebDeploy Incremental (Multi-Project with Subfolders)"

on:
  workflow_call:
    inputs:
      projects_json:
        required: true
        type: string
      runner_tag:
        required: true
        type: string
      e2e_tests_json:
        required: false
        type: string
      skip_items_json:
        required: false
        type: string

jobs:
  # # =======================================
  # # 1Ô∏è‚É£ BUILD PROJECTS
  # # =======================================
  build_projects:
    name: "üî® Build Projects"
    runs-on: [self-hosted, windows, x64, laptop]
    strategy:
      matrix: ${{ fromJson(inputs.projects_json) }}
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4

      - name: "Build with composite action (isolated output)"
        uses: PruebaActions/WorkFlows-Templates/.github/actions/build-release-deploy@main
        with:
          solution_path: ${{ matrix.solution_path }}
          project_path: ${{ matrix.project_path }}
          project_type: ${{ matrix.project_type }}
          output_path: ${{ github.workspace }}/publish/${{ matrix.project_name }}

      - name: "üì¶ Upload Artifact (per project)"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project_name }}
          path: ${{ github.workspace }}/publish/${{ matrix.project_name }}


  # =======================================
  # 3Ô∏è‚É£ DEPLOY TO TEST SITE
  # =======================================
  deploy_to_site_test:
    name: "üöÄ Deploy to IIS (Testing Site)"
    needs: build_projects
    if: ${{ contains(inputs.projects_json, 'deploy_testing_path') && github.ref == 'refs/heads/Production' }}
    runs-on: ${{ fromJson(inputs.runner_tag) }}
    strategy:
      matrix: ${{ fromJson(inputs.projects_json) }}
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4

      - name: "‚¨áÔ∏è Download Artifact (specific project)"
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.project_name }}
          path: ${{ github.workspace }}/artifact/${{ matrix.project_name }}

      - name: "Deploy to Test IIS Site"
        shell: pwsh
        run: |
          $publishPath = "$env:GITHUB_WORKSPACE\artifact\${{ matrix.project_name }}"
          $siteTestPath = "${{ matrix.deploy_testing_path }}"
          $msdeploy = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          if (-Not (Test-Path $msdeploy)) {
            $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          }

          # üß† Construir din√°micamente los argumentos -skip basados en tipo real (folder vs file)
          $skipArgs = @()
          $skipItems = '${{ inputs.skip_items_json }}'

          if ($skipItems -ne '') {
            $items = $skipItems | ConvertFrom-Json
            foreach ($name in $items) {
              $fullPath = Join-Path $publishPath $name
              if (Test-Path $fullPath -PathType Container) {
                # üü© Es una carpeta real
                $skipArgs += "-skip:objectName=dirPath,absolutePath='.*[\\/]({0})($|[\\/])'".Replace("{0}", [Regex]::Escape($name))
              } elseif (Test-Path $fullPath -PathType Leaf) {
                # üü¶ Es un archivo real
                $skipArgs += "-skip:objectName=filePath,absolutePath='.*[\\/]{0}$'".Replace("{0}", [Regex]::Escape($name))
              } else {
                Write-Warning "‚ö†Ô∏è No se encontr√≥ '$name' dentro de $publishPath ‚Äî ignorando detecci√≥n de tipo."
              }
            }
          }

          Write-Host "üöÄ Deploying ${{ matrix.project_name }} to $destPath"
          Write-Host "üì¶ Source: $publishPath"
          Write-Host "üß© Skip arguments: $($skipArgs -join ' ')"

          Write-Host "üöÄ Deploying from $publishPath to $siteTestPath"
          & $msdeploy `
            -verb:sync `
            -source:dirPath="$publishPath" `
            -dest:dirPath="$siteTestPath" `
            @skipArgs `
            -useCheckSum `
            -allowUntrusted `
            -enableRule:AppOffline `
            -enableRule:DoNotDeleteRule `
            -retryAttempts:3 `
            -verbose


          if ($LASTEXITCODE -ne 0) {
            Write-Host "Deployment failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          } else {
            Write-Host "Deployment completed successfully."
          }

  # =======================================
  # 4Ô∏è‚É£ RUN E2E TESTS
  # =======================================
  run_e2e_tests:
    name: "üß™ Run E2E Tests"
    needs: deploy_to_site_test
    if: ${{ github.ref == 'refs/heads/Production' && inputs.e2e_tests_json != '' }}
    runs-on: ${{ fromJson(inputs.runner_tag) }}
    strategy:
      matrix:
        test_command: ${{ fromJson(inputs.e2e_tests_json) }}
    steps:

      - name: Checkingout from other repository
        uses: actions/checkout@v4
        with:
          repository: PruebaActions/Website
          ref: master
          token: ${{ secrets.GITHUB_TOKEN}}
          path: Klk

      - name: List files in checkout directory
        run: dir C:\actions-runner\_work\UVC.Websites\UVC.Websites\Klk

      - name: "Run Maven test"
        shell: pwsh
        run: |
          Write-Host "üß™ Running: ${{ matrix.test_command }}"
          & ${{ matrix.test_command }}
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Tests passed successfully."
          } else {
            Write-Error "‚ùå Tests failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }


  # # =======================================
  # 2Ô∏è‚É£ CREATE BACKUP
  # =======================================
  prepare_backup:
    name: "üóÇÔ∏è Create Backup"
    needs: [build_projects]
    if: >
      ${{
        (github.ref == 'refs/heads/Production' && 
         (needs.build_projects.result == 'success') && 
         (needs.run_e2e_tests.result == 'success')) ||
        (github.ref == 'refs/heads/Development' &&
         (needs.build_projects.result == 'success'))
      }}
    runs-on: ${{ fromJson(inputs.runner_tag) }}
    strategy:
      matrix: ${{ fromJson(inputs.projects_json) }}
      max-parallel: 1
    steps:
      - name: "Create Dynamic Backup Folder"
        id: create_backup
        shell: pwsh
        run: |
          $deployPath = "${{ matrix.deploy_target_path }}"
          $parentDir = Split-Path $deployPath -Parent
          $backupRoot = Join-Path $parentDir "backups"

          if (!(Test-Path $backupRoot)) {
            New-Item -ItemType Directory -Path $backupRoot | Out-Null
          }

          $rawName = Split-Path $deployPath -Leaf
          $siteName = ($rawName -replace "-\d{4}-\d{2}-\d{2}-\d+$", "")

          # üß† Obtener la √∫ltima fecha y hora de modificaci√≥n del deployment actual
          if (Test-Path $deployPath) {
            $lastModifiedItem = Get-ChildItem -Recurse -Path $deployPath -ErrorAction SilentlyContinue |
              Sort-Object LastWriteTime -Descending |
              Select-Object -First 1

            if ($lastModifiedItem) {
              $dateTime = $lastModifiedItem.LastWriteTime.ToString("yyyy-MM-dd")
              Write-Host "üìÖ √öltima modificaci√≥n detectada: $dateTime"
            } else {
              Write-Host "‚ö†Ô∏è No se encontraron archivos dentro del deployment. Usando fecha actual."
              $dateTime = (Get-Date).ToString("yyyy-MM-dd")
            }
          } else {
            Write-Host "‚ö†Ô∏è Ruta de deployment no encontrada. Usando fecha actual."
            $dateTime = (Get-Date).ToString("yyyy-MM-dd")
          }

          # Crear nombre versionado para el backup con la fecha + hora del √∫ltimo cambio
          $i = 1
          while (Test-Path "$backupRoot\$siteName-$dateTime-$i") { $i++ }
          $backupFolder = "$backupRoot\$siteName-$dateTime-$i"

          Write-Host "üì¶ Creando carpeta de backup: $backupFolder"
          New-Item -ItemType Directory -Path $backupFolder | Out-Null

          if (Test-Path $deployPath) {
            Write-Host "üìÇ Copiando desde $deployPath ‚Üí $backupFolder"
            Copy-Item -Path "$deployPath\*" -Destination $backupFolder -Recurse -Force
            Write-Host "‚úÖ Backup completado con √©xito."
          } else {
            Write-Host "‚ö†Ô∏è No se encontr√≥ el deployment original, no se gener√≥ backup."
          }

  # =======================================
  # 5Ô∏è‚É£ DEPLOY TO IIS (PROD)
  # =======================================
  deploy_to_iis:
    name: "üöÄ Deploy to IIS (Production)"
    needs: [prepare_backup]
    if: >
      ${{
        (github.ref == 'refs/heads/Production' &&
         needs.prepare_backup.result == 'success' &&
         needs.run_e2e_tests.result == 'success') ||
        (github.ref == 'refs/heads/Development' &&
         needs.prepare_backup.result == 'success')
      }}
    runs-on: ${{ fromJson(inputs.runner_tag) }}
    strategy:
      matrix: ${{ fromJson(inputs.projects_json) }}
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4

      - name: "‚¨áÔ∏è Download Artifact (specific project)"
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.project_name }}
          path: ${{ github.workspace }}/artifact/${{ matrix.project_name }}

      - name: "Deploy to IIS"
        shell: pwsh
        run: |
          $publishPath = "$env:GITHUB_WORKSPACE\artifact\${{ matrix.project_name }}"
          $destPath = "${{ matrix.deploy_target_path }}"
          $msdeploy = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          if (-Not (Test-Path $msdeploy)) { $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe" }

          # üß† Construir din√°micamente los argumentos -skip basados en tipo real (folder vs file)
          $skipArgs = @()
          $skipItems = '${{ inputs.skip_items_json }}'

          if ($skipItems -ne '') {
            $items = $skipItems | ConvertFrom-Json
            foreach ($name in $items) {
              $fullPath = Join-Path $publishPath $name
              if (Test-Path $fullPath -PathType Container) {
                # üü© Es una carpeta real
                $skipArgs += "-skip:objectName=dirPath,absolutePath='.*[\\/]({0})($|[\\/])'".Replace("{0}", [Regex]::Escape($name))
              } elseif (Test-Path $fullPath -PathType Leaf) {
                # üü¶ Es un archivo real
                $skipArgs += "-skip:objectName=filePath,absolutePath='.*[\\/]{0}$'".Replace("{0}", [Regex]::Escape($name))
              } else {
                Write-Warning "‚ö†Ô∏è No se encontr√≥ '$name' dentro de $publishPath ‚Äî ignorando detecci√≥n de tipo."
              }
            }
          }

          Write-Host "üöÄ Deploying ${{ matrix.project_name }} to $destPath"
          Write-Host "üì¶ Source: $publishPath"
          Write-Host "üß© Skip arguments: $($skipArgs -join ' ')"

          & $msdeploy `
            -verb:sync `
            -source:dirPath="$publishPath" `
            -dest:dirPath="$destPath" `
            @skipArgs `
            -useCheckSum `
            -allowUntrusted `
            -enableRule:AppOffline `
            -enableRule:DoNotDeleteRule `
            -retryAttempts:3 `
            -verbose
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Deployment failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          } else {
            Write-Host "Deployment completed successfully."
          }
          

